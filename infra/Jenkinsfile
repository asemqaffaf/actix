// infra/Jenkinsfile
pipeline {
    agent any  // Run on the Jenkins host instead of inside a Docker container
    environment {
        PORT = '3000'
    }

    stages {
        // stage('Checkout') {
        //     steps {
        //         git branch: 'main', url: 'https://github.com/asemqaffaf/actix.git'
        //     }
        // }

        stage('Debug Jenkins Environment') {
            steps {
                sh 'echo "Current user: $(whoami)"'
                sh 'echo "Current groups: $(groups)"'
                sh 'echo "Current PATH: $PATH"'
                sh 'which docker || echo "Docker not found in PATH"'
            }
        }

        stage('Build') {
            steps {
                // Change working directory to where Cargo.toml is located
                sh 'docker run --rm -v "$WORKSPACE:/workspace" -w /workspace/app rust:latest cargo build --release'
            }
        }

        stage('Test') {
            steps {
                // Change working directory to where Cargo.toml is located
                sh 'docker run --rm -v "$WORKSPACE:/workspace" -w /workspace/app rust:latest cargo test'
            }
        }

        stage('Deploy - Docker on Localhost') {
            steps {
                script {
                    def appName = 'actix'
                    sh "docker build -t ${appName}:latest -f infra/Dockerfile ."
                    sh "docker stop ${appName} || true"
                    sh "docker rm ${appName} || true"
                    sh "docker run -d --name ${appName} -p ${env.PORT}:${env.PORT} ${appName}:latest"
                    
                    // Wait for container to start and inspect
                    sh 'sleep 3'
                    sh 'docker ps -a | grep actix'
                    sh 'docker logs actix'
                    sh 'docker inspect actix | grep -A 5 "NetworkSettings"'
                    
                    echo "Actix app deployed via Docker on localhost, accessible via http://localhost:${env.PORT}"
                }
            }
        }
    }

    post {
        always {
            script {
                node {
                    deleteDir()
                }
            }
        }
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
